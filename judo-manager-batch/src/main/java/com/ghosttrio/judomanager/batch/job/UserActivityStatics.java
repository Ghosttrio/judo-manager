package com.ghosttrio.judomanager.batch.job;import com.ghosttrio.judomanager.batch.common.properties.SlackProperties;import com.ghosttrio.judomanager.batch.service.PdfService;import com.ghosttrio.judomanager.batch.util.slack.SlackUtil;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.batch.core.Job;import org.springframework.batch.core.Step;import org.springframework.batch.core.job.builder.JobBuilder;import org.springframework.batch.core.repository.JobRepository;import org.springframework.batch.core.step.builder.StepBuilder;import org.springframework.batch.core.step.tasklet.Tasklet;import org.springframework.batch.repeat.RepeatStatus;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.transaction.PlatformTransactionManager;@Slf4j@Configuration@RequiredArgsConstructorpublic class UserActivityStatics {    /**     * 배치 job 리스트     * 1. 슬랙으로 유저 활동 정보 NOTIFICATION     * 2. 쌓인 출석 정보를 주기적으로 저장 테이블로 이동     */    private final SlackUtil slackUtil;    private final PdfService pdfService;    private final SlackProperties slackProperties;    @Bean    public Job userActivityStaticsJob(JobRepository jobRepository, Step userActivityStaticsStep){        return new JobBuilder("userActivityStaticsJob", jobRepository)                .start(userActivityStaticsStep)                .build();    }    @Bean    public Step userActivityStaticsStep(JobRepository jobRepository,                                        PlatformTransactionManager transactionManager,                                        Tasklet userActivityStaticsTasklet){        return new StepBuilder("slackStep", jobRepository)                .tasklet(userActivityStaticsTasklet, transactionManager)                .build();    }    @Bean    public Tasklet userActivityStaticsTasklet(){        return ((contribution, chunkContext) -> {//            slackUtil.messageSend("test");            byte[] pdf = pdfService.createPdf();            slackUtil.pdfSend(pdf);            return RepeatStatus.FINISHED;        });    }}