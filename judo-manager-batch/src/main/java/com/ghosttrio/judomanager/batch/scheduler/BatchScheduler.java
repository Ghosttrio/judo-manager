package com.ghosttrio.judomanager.batch.scheduler;import com.ghosttrio.judomanager.batch.job.UserActivityStatics;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.batch.core.Job;import org.springframework.batch.core.JobParametersBuilder;import org.springframework.batch.core.JobParametersInvalidException;import org.springframework.batch.core.Step;import org.springframework.batch.core.launch.JobLauncher;import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;import org.springframework.batch.core.repository.JobRepository;import org.springframework.batch.core.repository.JobRestartException;import org.springframework.batch.core.step.tasklet.Tasklet;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import org.springframework.transaction.PlatformTransactionManager;import java.util.Date;@Slf4j@Component@RequiredArgsConstructorpublic class BatchScheduler {    private final JobLauncher jobLauncher;    private final UserActivityStatics userActivityStatics;    private final JobRepository jobRepository;    private final PlatformTransactionManager transactionManager;    @Scheduled(cron = "* * * * * *", zone = "Asia/Seoul")    public void runJob() throws            JobParametersInvalidException,            JobExecutionAlreadyRunningException,            JobRestartException,            JobInstanceAlreadyCompleteException {        Tasklet tasklet = userActivityStatics.userActivityStaticsTasklet();        Step step = userActivityStatics.userActivityStaticsStep(jobRepository, transactionManager, tasklet);        Job job = userActivityStatics.userActivityStaticsJob(jobRepository, step);        jobLauncher.run(job, new JobParametersBuilder().addDate("date", new Date()).toJobParameters());    }}