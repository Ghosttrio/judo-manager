plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.ghosttrio'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
	queryDslVersion = "5.0.0"
}

dependencies {
	// openfeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// eureka client
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	// spring cloud config
	implementation 'org.springframework.cloud:spring-cloud-starter'
	// spring cloud bootstrap
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	// actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// amqp
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	// mysql
	runtimeOnly 'com.mysql:mysql-connector-j'
	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	// resilience4j
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
//	// sleuth -> deprecated
//	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation("io.micrometer:micrometer-registry-prometheus")
	implementation("io.github.openfeign:feign-micrometer")
	// zipkin
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
	main.java.srcDirs += [ generated ]
}

clean {
	delete file(generated)
}

